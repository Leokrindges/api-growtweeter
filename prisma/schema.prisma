generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  username  String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("criado_em") @db.Timestamp()
  deleted   Boolean   @default(false) @db.Boolean
  deletedAt DateTime? @map("deletado_em") @db.Timestamp()
  authToken String?   @map("auth_token") @db.Text

  tweet Tweet[]

  like Like?

  reply Reply?

  @@map("users")
}

enum TweetType {
  R
  N
}

model Tweet {
  id        String    @id @default(uuid()) @db.Uuid
  content   String    @db.VarChar(255)
  type      TweetType @default(N)
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("criado_em") @db.Timestamp()
  deleted   Boolean   @default(false) @db.Boolean
  deletedAt DateTime? @map("deletado_em") @db.Timestamp()

  user User @relation(fields: [userId], references: [id])

  like  Like[]
  reply Reply[]

  @@map("tweets")
}

model Like {
  id      String   @id @default(uuid()) @db.Uuid
  userId  String   @unique @map("user_id") @db.Uuid
  tweetId String   @map("tweet_id") @db.Uuid
  likedIn DateTime @default(now()) @map("liked_in") @db.Timestamp()

  tweet Tweet @relation(fields: [tweetId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("likes")
}

model Reply {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @unique @map("user_id") @db.Uuid
  tweetId String @map("tweet_id") @db.Uuid

  tweet Tweet @relation(fields: [tweetId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("replys")
}
